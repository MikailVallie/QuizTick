{
  "questions": [
  {"questionText": "What will be the output? console.log([] + []);","options": ["[]", "\"\"", "undefined", "\"[]\""],"correctIndex": 1,"isTrueFalse": false},
  {"questionText": "Which is NOT a JavaScript data structure?","options": ["Map", "Set", "LinkedList", "WeakMap"],"correctIndex": 2,"isTrueFalse": false},
  {"questionText": "console.log(0.1 + 0.2 === 0.3);","options": ["true", "false", "NaN", "Error"], "correctIndex": 1,"isTrueFalse": false},
  {"questionText": "Object.freeze() makes an object completely immutable.","options": ["True", "False"],"correctIndex": 0,"isTrueFalse": true},
  {"questionText": "Which will NOT trigger the JavaScript event loop?","options": ["setTimeout", "Promise.resolve().then(...)", "requestAnimationFrame", "while(true) {}"],"correctIndex": 3,"isTrueFalse": false},
  {"questionText": "Which is NOT a valid way to copy an object?","options": ["Object.assign({}, obj)", "{ ...obj }", "JSON.parse(JSON.stringify(obj))", "obj.clone()"],"correctIndex": 3,"isTrueFalse": false },
  {"questionText": "console.log(typeof typeof 1);","options": ["\"number\"", "\"string\"", "\"object\"", "\"undefined\""], "correctIndex": 1, "isTrueFalse": false},
  {"questionText": "The optional chaining operator in JavaScript is '?.'.","options": ["True", "False"],"correctIndex": 0,"isTrueFalse": true},
  {"questionText": "console.log([] == ![]);", "options": ["true", "false", "undefined", "NaN"],"correctIndex": 0,"isTrueFalse": false},
  {"questionText": "Which method returns an iterator for the values of an array?","options": ["values()", "keys()", "entries()", "iterator()"],"correctIndex": 0,"isTrueFalse": false},
  {"questionText": "JavaScript is single-threaded but can run asynchronous code.", "options": ["True", "False"], "correctIndex": 0, "isTrueFalse": true},
  {"questionText": "Symbol values are unique even if they have the same description.","options": ["True", "False"],"correctIndex": 0, "isTrueFalse": true},
  {"questionText": "Object.seal() allows adding new properties to an object.", "options": ["True", "False"], "correctIndex": 1, "isTrueFalse": true},
  {"questionText": "NaN === NaN returns true.","options": ["True", "False"],"correctIndex": 1,"isTrueFalse": true },
  {"questionText": "The 'finally' block always executes after try...catch.", "options": ["True", "False"], "correctIndex": 0,"isTrueFalse": true},
  {"questionText": "WeakMap keys can only be objects.","options": ["True", "False"],"correctIndex": 0, "isTrueFalse": true },
  {"questionText": "Top-level await is supported in ES2022.", "options": ["True", "False"],"correctIndex": 0,"isTrueFalse": true},
  {"questionText": "null is considered an object in JavaScript due to a legacy bug.","options": ["True", "False"],"correctIndex": 0,"isTrueFalse": true},
  {"questionText": "A generator function is declared using 'function*'.","options": ["True", "False"],"correctIndex": 0,"isTrueFalse": true},
  {"questionText": "console.log([] + {});", "options": ["\"[object Object]\"", "{}", "NaN", "Error"], "correctIndex": 0, "isTrueFalse": false},
  {"questionText": "Event bubbling describes events propagating from parent to child.","options": ["True", "False"], "correctIndex": 1,"isTrueFalse": true},
{"questionText": "console.log([] == []);", "options": ["true", "false", "undefined", "Error"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which built-in object allows working with raw binary data in JavaScript?", "options": ["Buffer", "ArrayBuffer", "DataView", "TypedArray"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log('5' + 3 - 2);", "options": ["\"53-2\"", "\"51\"", "51", "NaN"], "correctIndex": 2, "isTrueFalse": false},
{"questionText": "Which of the following is NOT a JavaScript ES6 feature?", "options": ["let and const", "arrow functions", "classes", "pointers"], "correctIndex": 3, "isTrueFalse": false},
{"questionText": "console.log(!!'false');", "options": ["true", "false", "undefined", "NaN"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "Which object is used for structured cloning in JavaScript?", "options": ["Object.assign()", "structuredClone()", "JSON.stringify()", "clone()"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log(typeof Symbol());", "options": ["\"object\"", "\"symbol\"", "\"string\"", "\"undefined\""], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which of these methods does NOT mutate the original array?", "options": ["splice()", "reverse()", "slice()", "sort()"], "correctIndex": 2, "isTrueFalse": false},
{"questionText": "console.log(0 || 'hello');", "options": ["0", "\"hello\"", "undefined", "NaN"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which API allows JavaScript code to run in a separate background thread?", "options": ["Service Workers", "Web Workers", "Fetch API", "Promise API"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log(2 ** 3 ** 2);", "options": ["64", "512", "16", "Error"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which statement about JavaScript hoisting is correct?", "options": ["Variables declared with var are hoisted", "let variables are hoisted and initialized to undefined", "Functions cannot be hoisted", "const variables are not hoisted at all"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "console.log([...'abc']);", "options": ["[\"abc\"]", "[\"a\",\"b\",\"c\"]", "[\"a\"]", "Error"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which operator has the highest precedence in JavaScript?", "options": ["*", "()", "++", "=>"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log('10' - - '5');", "options": ["5", "15", "\"105\"", "NaN"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which built-in JavaScript type is iterable by default?", "options": ["Object", "Array", "Number", "Boolean"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log(typeof new Map());", "options": ["\"object\"", "\"map\"", "\"function\"", "\"collection\""], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "Which statement best describes the event loop in JavaScript?", "options": ["It runs tasks in multiple threads", "It handles asynchronous callbacks", "It executes synchronous code only", "It is part of the DOM API"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log(Promise.resolve(42) instanceof Promise);", "options": ["true", "false", "undefined", "Error"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "Which function converts an array-like object into an array?", "options": ["Array.from()", "Array.of()", "Object.keys()", "toArray()"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "console.log('2' == 2 && '2' === 2);", "options": ["true", "false", "NaN", "Error"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which of these is NOT a valid JavaScript Promise state?", "options": ["pending", "resolved", "fulfilled", "rejected"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "console.log(!!undefined);", "options": ["true", "false", "undefined", "Error"], "correctIndex": 1, "isTrueFalse": false},
{"questionText": "Which function allows deep merging of objects in modern JavaScript?", "options": ["Object.assign()", "structuredClone()", "Object.group()", "There is no built-in deep merge"], "correctIndex": 3, "isTrueFalse": false},
{"questionText": "console.log([...new Set([1,2,2,3])]);", "options": ["[1,2,3]", "[1,2,2,3]", "[1,3]", "Error"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "Which keyword is used with async functions to pause execution?", "options": ["wait", "pause", "await", "yield"], "correctIndex": 2, "isTrueFalse": false},
{"questionText": "console.log(Object.getPrototypeOf([]) === Array.prototype);", "options": ["true", "false", "undefined", "Error"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "Which of these methods returns an array of a Map's keys?", "options": ["map.keys()", "map.values()", "Object.keys(map)", "map.entries()"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "console.log(+'');", "options": ["0", "NaN", "undefined", "Error"], "correctIndex": 0, "isTrueFalse": false},
{"questionText": "The Proxy object in JavaScript can be used to intercept and customize operations on objects.", "options": ["True", "False"], "correctIndex": 0, "isTrueFalse": true}
]
}