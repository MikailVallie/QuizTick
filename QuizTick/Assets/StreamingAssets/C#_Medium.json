{
  "questions": [
    {"questionText": "Which keyword is used to declare a method that can be overridden in derived classes?", "options": ["virtual", "abstract", "override", "sealed"], "correctIndex": 0, "isTrueFalse": false,       "funFact": "The 'virtual' keyword enables polymorphism — allowing derived classes to change a method’s behavior."},
    {"questionText": "Which keyword is used to implement polymorphism in derived classes?", "options": ["override", "extends", "sealed", "static"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Can structs in C# inherit from another struct or class?", "options": ["True", "False"], "correctIndex": 1, "isTrueFalse": true},
    {"questionText": "Which keyword is used to free unmanaged resources in C#?", "options": ["delete", "dispose", "release", "finalize"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which modifier allows a class to be used only as a base class?", "options": ["sealed", "abstract", "virtual", "internal"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which C# feature allows multiple methods to be called through a single reference?", "options": ["Events", "Delegates", "Interfaces", "Generics"], "correctIndex": 1, "isTrueFalse": false,       "funFact": "Delegates are the foundation of events and callbacks — like function pointers in C++!"},
    {"questionText": "LINQ stands for?", "options": ["Language Integrated Query", "Lightweight Indexed Query", "Linked Internal Query", "Logical Input Query"], "correctIndex": 0, "isTrueFalse": false,       "funFact": "LINQ lets you write SQL-style queries directly inside C# code — super powerful for data manipulation."},
    {"questionText": "Which keyword is used to create a thread in C#?", "options": ["task", "async", "Thread", "new"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "Which collection guarantees unique elements?", "options": ["List", "Array", "HashSet", "Queue"], "correctIndex": 2, "isTrueFalse": false,       "funFact": "HashSet automatically ignores duplicates — perfect for storing unique values efficiently."},
    {"questionText": "Which method is called by the Garbage Collector before an object is destroyed?", "options": ["Delete()", "Dispose()", "Finalize()", "Destructor()"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "Can interfaces in C# have fields?", "options": ["True", "False"], "correctIndex": 1, "isTrueFalse": true},
    {"questionText": "Which keyword is used to make a variable that cannot be changed after initialization?", "options": ["readonly", "const", "static", "final"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which keyword is used for asynchronous programming in C#?", "options": ["await", "async", "task", "Both async and await"], "correctIndex": 3, "isTrueFalse": false,       "funFact": "The async/await keywords make asynchronous code look like synchronous code — clean and readable!"},
    {"questionText": "Which keyword is used to define a generic type in C#?", "options": ["template", "generic", "T", "typename"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "Which interface must a class implement to support iteration with foreach?", "options": ["IEnumerable", "IEnumerator", "ICollection", "IList"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Is it possible to overload operators in C#?", "options": ["True", "False"], "correctIndex": 0, "isTrueFalse": true},
    {"questionText": "Which access modifier makes a class member visible in the same assembly but not in other assemblies?", "options": ["private", "protected", "internal", "public"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "What is the default access modifier for class members in C#?", "options": ["private", "protected", "internal", "public"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which type of class cannot be instantiated directly?", "options": ["sealed", "abstract", "static", "internal"], "correctIndex": 1, "isTrueFalse": false,       "funFact": "Abstract classes are like blueprints — they define structure but can’t be built directly."},
    {"questionText": "Which keyword is used to handle resource cleanup automatically in C#?", "options": ["try", "catch", "using", "dispose"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "Which keyword is used to hide a base class method without overriding?", "options": ["shadow", "hide", "new", "sealed"], "correctIndex": 2, "isTrueFalse": false},
    {"questionText": "Can abstract classes have constructors?", "options": ["True", "False"], "correctIndex": 0, "isTrueFalse": true},
    {"questionText": "Which keyword prevents further overriding of a method?", "options": ["sealed", "final", "readonly", "static"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which keyword is used with events in C#?", "options": ["delegate", "event", "trigger", "signal"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which class provides base functionality for collections?", "options": ["System.Object", "System.Collection", "System.Collections.Generic", "System.Collections"], "correctIndex": 3, "isTrueFalse": false},
    {"questionText": "What is boxing in C#?", "options": ["Converting value type to reference type", "Converting reference type to value type", "Packing data into arrays", "None of the above"], "correctIndex": 0, "isTrueFalse": false,       "funFact": "Boxing moves a value type to the heap by wrapping it in an object — useful but costly in performance."},
    {"questionText": "What is unboxing in C#?", "options": ["Converting reference type to value type", "Converting value type to reference type", "Casting an object", "None of the above"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which keyword is used to define a partial class?", "options": ["split", "partial", "fragment", "divide"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which keyword makes a method belong to the class rather than an instance?", "options": ["const", "static", "readonly", "sealed"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which exception is thrown when dividing by zero in C#?", "options": ["DivideByZeroException", "ArithmeticException", "InvalidOperationException", "SystemException"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which collection type allows FIFO (First In First Out)?", "options": ["Stack", "Queue", "List", "Dictionary"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which collection type allows LIFO (Last In First Out)?", "options": ["Stack", "Queue", "Array", "List"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which operator is used to check type compatibility at runtime?", "options": ["as", "is", "typeof", "instanceof"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which operator attempts to cast an object and returns null if it fails?", "options": ["is", "as", "cast", "try"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which method is used to convert a string to an integer?", "options": ["Convert.ToInt32()", "Int.Parse()", "int.Parse()", "All of the above"], "correctIndex": 3, "isTrueFalse": false},
    {"questionText": "Which keyword defines a constant at compile time?", "options": ["readonly", "const", "static", "final"], "correctIndex": 1, "isTrueFalse": false,       "funFact": "Use 'const' for values that never change — like mathematical constants (PI = 3.14)."},
    {"questionText": "Which keyword is used for late binding in C#?", "options": ["var", "dynamic", "object", "auto"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which keyword is used to prevent inheritance of a class?", "options": ["abstract", "sealed", "virtual", "final"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which interface is implemented by all collections in C#?", "options": ["ICollection", "IEnumerable", "IEnumerator", "IQueryable"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which class acts as the root of the .NET type hierarchy?", "options": ["System.Type", "System.Object", "System.Base", "System.Root"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which operator is used for null-coalescing in C#?", "options": ["??", "?:", "||", "&&"], "correctIndex": 0, "isTrueFalse": false,       "funFact": "The null-coalescing operator (??) provides a fallback value when something is null."},
    {"questionText": "Which keyword is used to define an indexer?", "options": ["this", "index", "getset", "operator"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which access modifier allows access only within the same class?", "options": ["private", "protected", "internal", "public"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which access modifier allows access within the same class and derived classes?", "options": ["private", "protected", "internal", "sealed"], "correctIndex": 1, "isTrueFalse": false},
    {"questionText": "Which operator is used to combine delegates?", "options": ["+", "&", "||", "add"], "correctIndex": 0, "isTrueFalse": false},
    {"questionText": "Which keyword is used to implement encapsulation of data in properties?", "options": ["getset", "property", "this", "get; set;"], "correctIndex": 3, "isTrueFalse": false},
    {"questionText": "Which keyword is used with lambda expressions in C#?", "options": ["=>", "->", "lambda", "function"], "correctIndex": 0, "isTrueFalse": false,       "funFact": "Lambda expressions (=>) make your code concise — especially when working with LINQ!"}
  ]
}
